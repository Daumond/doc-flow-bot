from typing import Optional, Union
from aiogram import Bot
from aiogram.types import Message, CallbackQuery
from app.config.logging_config import get_logger

# Initialize logger
logger = get_logger(__name__)

class Notifier:
    def __init__(self, bot: Bot):
        self.bot = bot
        logger.debug("Notifier service initialized")

    async def notify_user(
        self,
        user_id: Union[int, str],
        text: str,
        reply_markup=None
    ) -> bool:
        """Send a notification to a specific user"""
        logger.debug(f"Sending notification to user {user_id}")
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=reply_markup
            )
            logger.debug(f"Successfully sent notification to user {user_id}")
            return True
        except Exception as e:
            logger.error(f"Failed to send notification to {user_id}: {str(e)}")
            return False

    async def notify_rop_application_created(
        self,
        user_id: int,
        agent_name: str,
        app_id: int
    ) -> bool:
        """Notify rop that a new application was created"""
        logger.info(f"Notifying about new ROP application {app_id}")
        text = (
            f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}\n\n"
            f"–ê–≤—Ç–æ—Ä: {agent_name}\n\n"
            f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å - /rop\n\n"
        )
        return await self.notify_user(user_id, agent_name, text)

    async def notify_agent_application_returned(
        self,
        agent_id: int,
        app_id: int,
        comment: str
    ) -> bool:
        """Notify agent that their application was returned"""
        logger.info(f"Notifying agent {agent_id} about returned application {app_id}")
        text = (
            f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ #{app_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É\n\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –†–û–ü–∞: {comment}\n\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–æ–π –Ω–∞–∂–º–∏—Ç–µ /my_applications"
        )
        return await self.notify_user(agent_id, text)

    async def notify_agent_task_assigned(
        self,
        agent_id: int,
        app_id: int,
        task_text: str
    ) -> bool:
        """Notify agent about a new task from lawyer"""
        logger.info(f"Notifying agent {agent_id} about new task for application {app_id}")
        text = (
            f"üìã –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç —é—Ä–∏—Å—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ #{app_id}\n\n"
            f"–ó–∞–¥–∞—á–∞: {task_text}\n\n"
            "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ /my_applications"
        )
        return await self.notify_user(agent_id, text)

    async def notify_application_approved(
        self,
        agent_id: int,
        app_id: int
    ) -> bool:
        """Notify agent that their application was approved"""
        logger.info(f"Notifying agent {agent_id} about approved application {app_id}")
        text = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞\n\n"
            "–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —é—Ä–∏—Å—Ç—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. "
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö."
        )
        return await self.notify_user(agent_id, text)

    async def notify_application_closed(
        self,
        agent_id: int,
        app_id: int
    ) -> bool:
        """Notify agent that their application was closed"""
        logger.info(f"Notifying agent {agent_id} about closed application {app_id}")
        text = (
            f"üèÅ –°–¥–µ–ª–∫–∞ –ø–æ –∑–∞—è–≤–∫–µ #{app_id} –∑–∞–∫—Ä—ã—Ç–∞\n\n"
        )
        return await self.notify_user(agent_id, text)
