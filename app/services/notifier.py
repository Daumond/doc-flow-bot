from typing import Optional, Union
from aiogram import Bot
from aiogram.types import Message, CallbackQuery
from loguru import logger

class Notifier:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def notify_user(
        self,
        user_id: Union[int, str],
        text: str,
        reply_markup=None
    ) -> bool:
        """Send a notification to a specific user"""
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=reply_markup
            )
            return True
        except Exception as e:
            logger.error(f"Failed to send notification to {user_id}: {e}")
            return False

    async def notify_agent_application_returned(
        self,
        agent_id: int,
        app_id: int,
        comment: str
    ) -> bool:
        """Notify agent that their application was returned"""
        text = (
            f"‚ö†Ô∏è *–ó–∞—è–≤–∫–∞ #{app_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É*\n\n"
            f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –†–û–ü–∞:* {comment}\n\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–æ–π –Ω–∞–∂–º–∏—Ç–µ /my_applications"
        )
        return await self.notify_user(agent_id, text)

    async def notify_agent_task_assigned(
        self,
        agent_id: int,
        app_id: int,
        task_text: str,
        lawyer_name: str
    ) -> bool:
        """Notify agent about a new task from lawyer"""
        text = (
            f"üìã *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ –∑–∞—è–≤–∫–µ #{app_id}*\n\n"
            f"*–û—Ç —é—Ä–∏—Å—Ç–∞:* {lawyer_name}\n"
            f"*–ó–∞–¥–∞—á–∞:* {task_text}\n\n"
            "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ /my_applications"
        )
        return await self.notify_user(agent_id, text)

    async def notify_application_approved(
        self,
        agent_id: int,
        app_id: int
    ) -> bool:
        """Notify agent that their application was approved"""
        text = (
            f"‚úÖ *–ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞*\n\n"
            "–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —é—Ä–∏—Å—Ç—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. "
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö."
        )
        return await self.notify_user(agent_id, text)

    async def notify_application_closed(
        self,
        agent_id: int,
        app_id: int
    ) -> bool:
        """Notify agent that their application was closed"""
        text = (
            f"üèÅ *–°–¥–µ–ª–∫–∞ –ø–æ –∑–∞—è–≤–∫–µ #{app_id} –∑–∞–∫—Ä—ã—Ç–∞*\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∏—Ä—É—é—â–µ–º—É —é—Ä–∏—Å—Ç—É."
        )
        return await self.notify_user(agent_id, text)
