from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import joinedload
import datetime

from app.db.models import Application, ApplicationStatus, User, Task
from app.db.repository import session_scope
from app.services.notifier import Notifier
from app.config.logging_config import get_logger

# Initialize logger
logger = get_logger(__name__)

router = Router(name="lawyer")

class LawyerStates(StatesGroup):
    task_text = State()

def _lawyer_actions_kb(app_id: int, yandex_public_url: str):
    """Create inline keyboard for lawyer actions"""
    logger.debug(f"Creating actions keyboard for app {app_id}")
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    if yandex_public_url:
        kb.button(text="üìÅ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫", url=yandex_public_url)
    kb.button(text="üìù –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"lawyer_task_{app_id}")
    kb.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"lawyer_close_{app_id}")
    kb.adjust(1)
    return kb.as_markup()

@router.message(F.text == "/lawyer")
async def list_for_lawyer(message: Message):
    """Show applications needing lawyer review"""
    logger.info(f"Lawyer {message.from_user.id} requested review list")
    try:
        with session_scope() as s:
            apps = s.query(Application).filter(
                Application.status == ApplicationStatus.to_lawyer
            ).options(joinedload(Application.agent)).all()
            
            if not apps:
                logger.info("No applications for review")
                return await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.")
            
            for app in apps:
                try:
                    text = (f"üìã *–ó–∞—è–≤–∫–∞ #{app.id}*\n"
                            f"–¢–∏–ø: {app.deal_type}\n"
                            f"–ê–¥—Ä–µ—Å: {app.address}\n"
                            f"–ê–≥–µ–Ω—Ç: {app.agent.full_name if app.agent else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                    yandex_link = getattr(app, 'yandex_public_url', None)
                    await message.answer(text, reply_markup=_lawyer_actions_kb(app.id, yandex_link))
                except Exception as e:
                    logger.error(f"Error showing app {app.id}: {e}")
    except Exception as e:
        logger.error(f"Error in list_for_lawyer: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫.")

@router.callback_query(F.data.startswith("lawyer_task_"))
async def lawyer_task(cb: CallbackQuery, state: FSMContext):
    """Start creating a task"""
    app_id = int(cb.data.split("_")[-1])
    logger.info(f"Lawyer {cb.from_user.id} creating task for app {app_id}")
    try:
        with session_scope() as s:
            if not s.query(Application).get(app_id):
                logger.warning(f"App {app_id} not found")
                return await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            
            await state.update_data(task_app_id=app_id)
            await state.set_state(LawyerStates.task_text)
            await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É:")
            await cb.answer()
    except Exception as e:
        logger.error(f"Error in lawyer_task: {e}", exc_info=True)
        await cb.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@router.message(LawyerStates.task_text)
async def lawyer_task_text(message: Message, state: FSMContext, notifier: Notifier):
    """Save task and notify agent"""
    logger.info(f"Processing task from lawyer {message.from_user.id}")
    try:
        data = await state.get_data()
        app_id = data.get("task_app_id")
        task_text = message.text
        
        with session_scope() as s:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É
            app = s.query(Application).get(app_id)
            if not app:
                logger.error(f"App {app_id} not found")
                await message.answer("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                await state.clear()
                return
                
            # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—é—Ä–∏—Å—Ç–∞)
            lawyer = s.query(User).filter(User.telegram_id == str(message.from_user.id)).first()
            if not lawyer:
                logger.error(f"Lawyer {message.from_user.id} not found")
                await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            app.status = ApplicationStatus.lawyer_task
            app.lawyer_id = lawyer.id
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = Task(
                application_id=app_id,
                author_id=lawyer.id,
                assignee_id=app.agent_id,
                text=task_text,
                status="open"
            )
            s.add(task)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É
            if app.agent_id:
                # Get the agent to access their telegram_id
                agent = s.query(User).filter(User.id == app.agent_id).first()
                if agent and agent.telegram_id:
                    await notifier.notify_agent_task_assigned(
                        agent_id=agent.telegram_id,  # Use telegram_id instead of internal ID
                        app_id=app_id,
                        task_text=task_text
                    )
                    logger.info(f"Notified agent {agent.telegram_id}")
        
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –∞–≥–µ–Ω—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {task_text}")
        await state.clear()
    except Exception as e:
        logger.error(f"Error in lawyer_task_text: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")

@router.callback_query(F.data.startswith("lawyer_close_"))
async def lawyer_close(cb: CallbackQuery, notifier: Notifier):
    """Close the deal"""
    app_id = int(cb.data.split("_")[-1])
    logger.info(f"Closing deal for app {app_id}")
    try:
        with session_scope() as s:
            app = s.query(Application).get(app_id)
            if app:
                app.status = ApplicationStatus.closed
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É
                if app.agent_id:
                    # Get the agent to access their telegram_id
                    agent = s.query(User).filter(User.id == app.agent_id).first()
                    if agent and agent.telegram_id:
                        await notifier.notify_application_closed(agent.telegram_id, app_id)
                        logger.info(f"Notified agent {agent.telegram_id}")
        
        await cb.message.answer("‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        await cb.answer()
    except Exception as e:
        logger.error(f"Error in lawyer_close: {e}", exc_info=True)
        await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏.", show_alert=True)
