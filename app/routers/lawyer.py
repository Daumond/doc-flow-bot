from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import joinedload

from app.db.models import Application, ApplicationStatus, User, Task
from app.db.repository import session_scope
from app.services.notifier import Notifier

router = Router(name="lawyer")

class LawyerStates(StatesGroup):
    task_text = State()

def _lawyer_actions_kb(app_id: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    kb = InlineKeyboardBuilder()
    
    # Add Yandex.Disk button with direct URL if available
    with session_scope() as s:
        app = s.get(Application, app_id)
        if app and app.yandex_public_url:
            kb.button(text="üìÅ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫", url=app.yandex_public_url)
    
    # Add other action buttons
    kb.button(text="üìù –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"lawyer_task_{app_id}")
    kb.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"lawyer_close_{app_id}")
    
    kb.adjust(1)
    return kb.as_markup()

@router.message(F.text == "/lawyer")
async def list_for_lawyer(message: Message):
    with (session_scope() as s):
        apps = s.query(Application).options(joinedload(Application.agent)
                                            ).filter(Application.status == ApplicationStatus.to_lawyer).all()

        if not apps:
            return await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")

        messages = []
        for app in apps:
            message_data = {
                'text': (f"–ó–∞—è–≤–∫–∞ #{app.id}\n"
                        f"–¢–∏–ø: {app.deal_type}\n"
                        f"–ê–¥—Ä–µ—Å: {app.address}\n"
                        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {app.agent_name}"),
                'reply_markup': _lawyer_actions_kb(app.id)
            }
            messages.append(message_data)

    # Now send all messages outside the session
    for msg in messages:
        await message.answer(text=msg['text'], reply_markup=msg['reply_markup'])


@router.callback_query(F.data.startswith("lawyer_task_"))
async def lawyer_task(cb: CallbackQuery, state: FSMContext):
    app_id = int(cb.data.split("_")[-1])
    await state.update_data(task_app_id=app_id)
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É:")
    await state.set_state(LawyerStates.task_text)
    await cb.answer()

@router.message(LawyerStates.task_text)
async def lawyer_task_text(message: Message, state: FSMContext, notifier: Notifier):
    data = await state.get_data()
    app_id = data.get("task_app_id")
    task_text = message.text
    
    with session_scope() as s:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É
        app = s.query(Application).get(app_id)
        if not app:
            await message.answer("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
            
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—é—Ä–∏—Å—Ç–∞)
        lawyer = s.query(User).filter(User.telegram_id == str(message.from_user.id)).first()
        if not lawyer:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        app.status = ApplicationStatus.lawyer_task
        app.lawyer_id = lawyer.id
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task = Task(
            application_id=app_id,
            author_id=lawyer.id,
            assignee_id=app.agent_id,
            text=task_text,
            status="open"
        )
        s.add(task)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É
        if app.agent_id:
            # Get the agent to access their telegram_id
            agent = s.query(User).filter(User.id == app.agent_id).first()
            if agent and agent.telegram_id:
                await notifier.notify_agent_task_assigned(
                    agent_id=agent.telegram_id,  # Use telegram_id instead of internal ID
                    app_id=app_id,
                    task_text=task_text,
                    lawyer_name=lawyer.full_name or "–Æ—Ä–∏—Å—Ç"
                )
    
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –∞–≥–µ–Ω—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {task_text}")
    await state.clear()

@router.callback_query(F.data.startswith("lawyer_close_"))
async def lawyer_close(cb: CallbackQuery, notifier: Notifier):
    app_id = int(cb.data.split("_")[-1])
    
    with session_scope() as s:
        app = s.query(Application).get(app_id)
        if app:
            app.status = ApplicationStatus.closed
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É
            if app.agent_id:
                # Get the agent to access their telegram_id
                agent = s.query(User).filter(User.id == app.agent_id).first()
                if agent and agent.telegram_id:
                    await notifier.notify_application_closed(agent.telegram_id, app_id)
    
    await cb.message.answer("‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    await cb.answer()
